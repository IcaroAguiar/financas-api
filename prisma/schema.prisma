generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  name             String
  password         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  profilePicture   String?
  resetToken       String?
  resetTokenExpiry DateTime?
  accounts         Account[]
  categories       Category[]
  debtors          Debtor[]
  subscriptions    Subscription[]
  transactions     Transaction[]
}

model Account {
  id            String         @id @default(uuid())
  name          String
  type          String
  balance       Int?           @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  debts         Debt[]
  subscriptions Subscription[]
  transactions  Transaction[]

  @@unique([userId, name])
}

model Category {
  id            String         @id @default(uuid())
  name          String
  color         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  debts         Debt[]
  debtors       Debtor[]
  subscriptions Subscription[]

  @@unique([userId, name])
}

model Transaction {
  id                   String                   @id @default(uuid())
  description          String
  amount               Int
  date                 DateTime
  type                 TransactionType
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  userId               String
  categoryId           String?
  accountId            String?
  isRecurring          Boolean                  @default(false)
  subscriptionId       String?
  firstInstallmentDate DateTime?
  installmentAmount    Int?
  installmentCount     Int?
  installmentFrequency InstallmentFrequency?
  isInstallmentPlan    Boolean                  @default(false)
  account              Account?                 @relation(fields: [accountId], references: [id])
  subscription         Subscription?            @relation(fields: [subscriptionId], references: [id])
  user                 User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  installments         TransactionInstallment[]
}

model Debtor {
  id         String    @id @default(uuid())
  name       String
  email      String?
  phone      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  categoryId String?
  debts      Debt[]
  category   Category? @relation(fields: [categoryId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Debt {
  id                   String                @id @default(uuid())
  description          String
  totalAmount          Int
  dueDate              DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  debtorId             String
  status               DebtStatus            @default(PENDENTE)
  installmentAmount    Int?
  installmentCount     Int?
  installmentFrequency InstallmentFrequency?
  isInstallment        Boolean               @default(false)
  notificationId       String?
  accountId            String?
  categoryId           String?
  account              Account?              @relation(fields: [accountId], references: [id])
  category             Category?             @relation(fields: [categoryId], references: [id])
  debtor               Debtor                @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  installments         Installment[]
  payments             Payment[]
}

model Payment {
  id          String   @id @default(uuid())
  amount      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  debtId      String
  notes       String?
  paymentDate DateTime @default(now())
  debt        Debt     @relation(fields: [debtId], references: [id], onDelete: Cascade)
}

model Installment {
  id                String            @id @default(uuid())
  installmentNumber Int
  amount            Int
  dueDate           DateTime
  paidDate          DateTime?
  status            InstallmentStatus @default(PENDENTE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  debtId            String
  debt              Debt              @relation(fields: [debtId], references: [id], onDelete: Cascade)
}

model TransactionInstallment {
  id                String            @id @default(uuid())
  installmentNumber Int
  amount            Int
  dueDate           DateTime
  paidDate          DateTime?
  status            InstallmentStatus @default(PENDENTE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  transactionId     String
  transaction       Transaction       @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Subscription {
  id              String                @id @default(uuid())
  name            String
  description     String?
  amount          Int
  type            TransactionType
  frequency       SubscriptionFrequency
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean               @default(true)
  nextPaymentDate DateTime
  lastProcessedAt DateTime?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  userId          String
  categoryId      String?
  accountId       String?
  account         Account?              @relation(fields: [accountId], references: [id])
  category        Category?             @relation(fields: [categoryId], references: [id])
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@unique([userId, name])
}

enum TransactionType {
  RECEITA
  DESPESA
  PAGO
}

enum SubscriptionFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum DebtStatus {
  PENDENTE
  PAGA
}

enum InstallmentFrequency {
  WEEKLY
  MONTHLY
}

enum InstallmentStatus {
  PENDENTE
  PAGO
  ATRASADO
}
